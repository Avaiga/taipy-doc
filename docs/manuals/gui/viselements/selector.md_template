A control that allows for selecting items from a list of choices.

Each item is represented by a string, an image or both.

The selector can let the user select multiple items.

A filtering feature is available to display only a subset of the items.

You can use an arbitrary type for all the items (see the [example](#binding-to-a-list-of-objects)).

# Styling

All the selector controls are generated with the "taipy-selector" CSS class. You can use this class
name to select the selector controls on your page and apply style.

## [Stylekit](../styling/stylekit.md) support

The [Stylekit](../styling/stylekit.md) provides a specific class that you can use to style selector controls:

* *fullwidth*<br/>
    If a selector control uses the *fullwidth* class, then it uses the whole available
    horizontal space.

# Usage

## Display a list of string

You can create a selector on a series of strings:

!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3

## Display as a dropdown

To make the selector control a drop-down selector, you can set the [*dropdown*](#p-dropdown)
property to True:

!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3
    dropdown:b=True

## Display with filter and multiple selection

You can add a filter input field that lets you display only strings that match the filter value.

!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3
    filter:b=True
    multiple:b=True

## Display a list of tuples

A selector control that returns an id while selecting a label or `Icon^`.

!!! taipy-element
    default={sel}
    lov={[("id1", "Label 1"), ("id2", Icon("/images/icon.png", "Label 2"),("id3", "Label 3")]}

## Display a list of objects

Assuming your Python code has created a list of object:
```py
class User:
    def __init__(self, id, name, birth_year):
        self.id, self.name, self.birth_year = (id, name, birth_year)

users = [
    User(231, "Johanna", 1987),
    User(125, "John", 1979),
    User(4,   "Peter", 1968),
    User(31,  "Mary", 1974)
    ]

user_sel = users[2]
```

If you want to create a selector control that lets you pick a specific user, you
can use the following fragment.

!!! taipy-element
    default={user_sel}
    lov={users}
    type=User
    adapter={lambda u: (u.id, u.name)}

In this example, we are using the Python list *users* as the selector's *list of values*.
Because the control needs a way to convert the list items (which are instances of the class
*User*) into a string that can be displayed, we are using an *adapter*: a function that converts
an object, whose type must be provided to the [*type*](#p-type) property, to a tuple. The first
element of the tuple is used to reference the selection (therefore those elements should be unique
among all the items) and the second element is the string that turns out to be displayed.
