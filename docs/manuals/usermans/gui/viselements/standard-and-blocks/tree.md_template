A control that allows for selecting items from a hierarchical view of items.

Each item is represented by a string, an image, or both.

The tree can let the user select multiple items.

A filtering feature is available to display only a subset of the items.

You can use an arbitrary type for all the items (see the
[example](#display-a-hierarchy-of-arbitrary-objects)).

# Styling

All the tree controls are generated with the "taipy-tree" CSS class. You can use this class
name to select the tree controls on your page and apply style.

# Usage

## Display a list of string

You can create a tree on a series of strings:

!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3

## Display with filter and multiple selection

You can add a filter input field that lets you display only strings that match the filter value.

The following tree definition will create a tree control that shows the filter selection
(setting the [*filter*](#p-filter) property to True) and allows users to select multiple items
(setting the [*multiple*](#p-multiple) property to True):
!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3
    filter:b=True
    multiple:b=True

## Display a list of tuples

The [*lov*](#p-lov) property value can be defined so that the tree displays labels and icons
while reflecting the selection by identifiers:
!!! taipy-element
    default={sel}
    lov={[("id1", "Label 1", [("id1.1", "Label 1.1"), ("id1.2", "Label 1.2")]), ("id2", Icon("/images/icon.png", "Label 2")), ("id3", "Label 3", [("id3.1", "Label 3.1"), ("id3.2", "Label 3.2")])]}

## Manage expanded nodes

The property [*expanded*](#p-expanded) must be used to control the expanded/collapse state of the
nodes. By default, the user can expand or collapse nodes.<br/>
If [*expanded*](#p-expanded) is set to False, there can be only one expanded node at any given
level of the tree:  if a node is expanded at a certain level and the user clicks on another node at
the same level, the first node will be automatically collapsed.

The [*expanded*](#p-expanded) property can also hold a list of node identifiers that are expanded.

!!! example "Definition"

    === "Markdown"

        ```
        <|{value}|tree|lov=Item 1;Item 2;Item 3|not expanded|>

        <|{value}|tree|lov=Item 1;Item 2;Item 3|expanded=Item 2|>
        ```

    === "HTML"

        ```html
        <taipy:tree value="{value}" lov="Item 1;Item 2;Item 3" expanded="False" />

        <taipy:tree value="{value}" lov="Item 1;Item 2;Item 3" expanded="Item 2" />
        ```

    === "Python"

        ```python
        import taipy.gui.builder as tgb
        ...
        tgb.tree("value", lov="Item 1;Item 2;Item 3", expanded=False)
        tgb.tree("value", lov="Item 1;Item 2;Item 3", expanded="Item 2")
        ```

## Display a tree of dictionary entries

The tree control has a predefined adapter that can display the definition of a dictionary
structure set to the [*lov*](#p-lov) property as long as each dictionary entry has an *id* and
a *label* key, as well as a *children* key that would hold, in a list, the children of a given
entry. Each child has the same constraints: the *id*, label*, and *children* keys must be
present.<br/>
An entry with no children needs to set an empty list as the value of its *children* key.

Here is an example. Assuming your Python code has created a list of dictionaries:
```python
users = [
    {"id": "231", "label": "Johanna", "year": 1987, "children": [{"id": "231.1", "label": "Johanna's son", "year": 2006}]},
    {"id": "125", "label": "John",    "year": 1979, "children": []},
    {"id": "4",   "label": "Peter",   "year": 1968, "children": []},
    {"id": "31",  "label": "Mary",    "year": 1974, "children": []}
    ]

user_sel = users[2]
```

The definition of a tree control that can represent this data is as simple as:
!!! taipy-element
    default={user_sel}
    lov={users}

## Display a list of objects with the built-in adapter

Objects with attributes *id*, *label*, and *children* (set to a list) can be dealt with
automatically by the built-in *lov* adapter of the tree control.

Assuming your Python code has created a list of such objects:
```python
class User:
    def __init__(self, id, label, birth_year, children):
        self.id, self.label, self.birth_year, self.children = (id, label, birth_year, children)

users = [
    User(231, "Johanna", 1987, [User(231.1, "Johanna's son", 2006, [])]),
    User(125, "John",    1979, []),
    User(4,   "Peter",   1968, []),
    User(31,  "Mary",    1974, [])
    ]

user_sel = users[2]
```

If you want to create a tree control that lets users pick a specific user, you
can use the following control definition:
!!! taipy-element
    default={user_sel}
    lov={users}

## Display a hierarchy of arbitrary objects

The [*adapter*](#p-adapter) property can be set to a function that transforms an arbitrary object
to a representation that the tree control can use: a tuple where the first element is an
identifier of the object (used in the [*value*](#p-value) property), the second element represents
the item's label, and the third element is a list to child objects.

Assuming your Python code has created a list of objects:
```python
class User:
    def __init__(self, id, name, birth_year, children):
        self.id, self.name, self.birth_year, self.children = (id, name, birth_year, children)

users = [
    User(231, "Johanna", 1987, [User(231.1, "Johanna's son", 2006, [])]),
    User(125, "John",    1979, []),
    User(4,   "Peter",   1968, []),
    User(31,  "Mary",    1974, [])
    ]

user_sel = users[2]
```

In this example, we use the Python list *users* as the tree's *list of values*.
Because the control needs a way to convert the list items (which are instances of the class
*User*) into a string that can be displayed, we are using an *adapter*: a function that converts
an object whose type must be provided to the *type* property to a tuple.

In our situation, the adapter can be a lambda function that returns
the adapted tuple for each object in the hierarchy:
!!! taipy-element
    default={user_sel}
    lov={users}
    type=User
    adapter={lambda u: (u.id, u.name, u.children)}


