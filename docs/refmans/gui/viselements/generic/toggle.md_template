A series of toggle buttons that the user can select.

# Details

You can use a string, an image, or both in each button.

A typical representation would be like this image:
<figure class="tp-center">
    <img src="../toggle-lov-d.png" class="visible-dark"  width="80%"/>
    <img src="../toggle-lov-l.png" class="visible-light" width="80%"/>
    <figcaption>Toggle control with three buttons</figcaption>
</figure>
In this example, the [*lov*](#p-lov) property of the control is a list of three string elements. If
the user selects one of the elements, [*value*](#p-value) is updated accordingly to the selected
string.

Note that if the variable bound to [*value*](#p-value) is a Boolean value, then the control displays
a switch control:
<figure class="tp-center">
    <img src="../toggle-switch-d.png" class="visible-dark"  width="80%"/>
    <img src="../toggle-switch-l.png" class="visible-light" width="80%"/>
    <figcaption>Toggle control bound to a Boolean variable</figcaption>
</figure>
The property [*value*](#p-value) reflects the control's status as a Boolean value.

You can also use an arbitrary type for all the items (see the [example](#use-arbitrary-objects)).

# Usage

## Display a list of string

You can create a list of toggle buttons from a series of strings:

!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3

## Unselect value

In a toggle control, all buttons might be unselected. Therefore there is no value selected.
In that case, the value of the property [*unselected_value*](#p-unselected_value) is assigned if
specified.

!!! taipy-element
    default={value}
    lov=Item 1;Item 2;Item 3
    unselected_value=No Value

## Display a list of tuples

A toggle control that returns an id while selecting a label or `Icon^`.

!!! taipy-element
    default={sel}
    lov={[("id1", "Label 1"), ("id2", Icon("/images/icon.png", "Label 2"),("id3", "Label 3")]}

## Use arbitrary objects

Assuming your Python code has created a list of objects:
```python
class User:
    def __init__(self, id, name, birth_year):
        self.id, self.name, self.birth_year = (id, name, birth_year)

users = [
    User(231, "Johanna", 1987),
    User(125, "John", 1979),
    User(4,   "Peter", 1968),
    User(31,  "Mary", 1974)
    ]

user_sel = users[2]
```

If you want to create a toggle control that lets you pick a specific user, you
can use the following fragment:

!!! taipy-element
    default={user_sel}
    lov={users}
    type=User
    adapter=lambda u: (u.id, u.name)

In this example, we are using the Python list *users* as the toggle's *list of values*.
Because the control needs a way to convert the list items (which are instances of the class
*User*) into a string that can be displayed, we are using an *adapter*: a function that converts
an object, whose type must be provided to the [*type*](#p-type) property, to a tuple. The first
element of the tuple is used to reference the selection (therefore those elements should be unique
among all the items) and the second element is the string that turns out to be displayed.

# Styling

All the toggle controls are generated with the "taipy-toggle" CSS class. You can use this class
name to select the toggle controls on your page and apply style.

The [Stylekit](../../../../userman/gui/styling/stylekit.md) also provides specific CSS classes that you can use to style
toggle controls:

- *relative*<br/>
  Resets the theme toggle position in the page flow (especially for the theme mode toggle).
- *nolabel*<br/>
  Hides the toggle control's label.
- *taipy-navbar*<br/>
  Gives the toggle control the look and feel of a [`navbar`](navbar.md).
